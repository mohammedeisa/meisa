<?php

/*
 * This file is part of the Sonata package.
 *
 * (c) Thomas Rabaix <thomas.rabaix@sonata-project.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Meisa\MenuBundle\Admin;

use Doctrine\Common\Collections\ArrayCollection;
use Sonata\AdminBundle\Admin\Admin;
use Sonata\AdminBundle\Show\ShowMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Meisa\MenuBundle\Entity\MenuConfigParameter;

/**
 * @author Thomas Rabaix <thomas.rabaix@sonata-project.org>
 */
class MenuConfigAdmin extends Admin
{

    /**
     * {@inheritdoc}
     */
    protected function configureFormFields(FormMapper $formMapper)
    {
        $availableApiRoutes = [];
        foreach ($this->getConfigurationPool()->getContainer()->get('router')->getRouteCollection()->all() as $name => $route) {
            $route = $route->compile();
            if (strpos($name, "api_") !== 0) {
                $emptyVars = [];
                foreach ($route->getVariables() as $v) {
                    $emptyVars[$v] = $v;
                }
                $availableApiRoutes[$name] = $name;
            }
        }

        $formMapper
            ->add('routeName', 'choice', array('choices' => $availableApiRoutes))
            ->add('displayName')
            ->add('type', 'choice', array('choices' => array('list' => 'List', 'show' => 'Show'), 'attr' => array('class' => 'route_type', 'style' => 'width:200px')));
        if ($this->getSubject()->getId()) {
            $formMapper->add('parameters', 'sonata_type_collection', array(
//                'cascade_validation' => false,
                'by_reference' => false,
                'required' => false,
                'attr' => array('class' => 'meisa_menu_parameters')
            ), array(
                'edit' => 'inline',
                'inline' => 'table',
                'sortable' => 'position',
                'link_parameters' => array('context' => 'default',
                )
            ));
        }
    }

    protected function configureDatagridFilters(DatagridMapper $datagridMapper)
    {
        $datagridMapper
            ->add('routeName')
            ->add('displayName')
            ->add('type')
            ->add('parameters');
    }

    /**
     * {@inheritdoc}
     */
    protected function configureShowFields(ShowMapper $showMapper)
    {
        $showMapper
            ->add('routeName')
            ->add('displayName')
            ->add('type')
            ->add('parameters');
    }

    /**
     * {@inheritdoc}
     */
    protected function configureListFields(ListMapper $listMapper)
    {

        $listMapper
            ->addIdentifier('routeName')
            ->add('displayName')
            ->add('type')
            ->add('parameters')
            ->add('_action', 'actions', array(
                'actions' => array(
                    'edit' => array(),
                    'delete' => array(),
                )
            ));
    }


    function getAvailableRoutes()
    {
        $router = $this->getConfigurationPool()->getContainer()->get('router');

        $availableApiRoutes = [];
        foreach ($router->getRouteCollection()->all() as $name => $route) {
            $route = $route->compile();
            if (strpos($name, "api_") !== 0) {
                $emptyVars = [];
                foreach ($route->getVariables() as $v) {
                    $emptyVars[$v] = $v;
                }
                $url = $this->generateUrl($name, $emptyVars);
                $availableApiRoutes[] = ["name" => $name, "url" => $url, "variables" => $route->getVariables()];
            }
        }
    }

    public function getTemplate($name)
    {
        switch ($name) {
            case 'edit':
                return 'MeisaMenuBundle:Admin:menu_config/base_edit.html.twig';
                break;
            default:
                return parent::getTemplate($name);
                break;
        }
    }


    public function prePersist($object)
    {
        if ($object->getType() == 'show') {
            $router = $this->getConfigurationPool()->getContainer()->get('router');
            $route = $router->getRouteCollection()->get($object->getRouteName());
            $parameters = $route->compile()->getVariables();
            foreach ($parameters as $parameter) {
                $configParameter = new MenuConfigParameter();
                $configParameter->setMenuConfig($object);
                $configParameter->setParameterKey($parameter);
                $object->addParameters($configParameter);
            }
        }
        parent::prePersist($object); // TODO: Change the autogenerated stub

    }


    public function preUpdate($object)
    {
        $menuConfigParameters = $object->getParameters();
        $object->setParameters(new ArrayCollection());

        foreach ($menuConfigParameters as $parameter) {
            $object->addParameters($parameter);
        }
    }
}